require "common.rb"

class << self

  # new_entry -- Introduce a new entry for the Makefile.
  def new_entry a_string
    puts
    puts a_string
  end

  # tab -- Output a line preceded by a tab character, to mean
  # what indentation means in a Makefile.
  def tab a_string
    print "\t"
    puts a_string
  end

  def debug line, description, value
    return
    puts
    print "# "
    print line.inspect
    print " "
    print description
    print ": "
    puts value.inspect
    puts
  end

  def commit
    tab "mv $@.t $@"
  end

  # Procedure to output a simple Ruby dependency in the Makefile.
  def simple_ruby_dep name, *other_deps
    debug __LINE__, "other_deps", other_deps
    other_deps_string = other_deps.inject("") do | a, e |
      debug __LINE__, "a", a
      debug __LINE__, "e", e
      a + " " + e
    end
    new_entry "../public/#{name}: #{name}.rb#{other_deps_string}"
    tab "ruby $(RUBYOPT) #{name}.rb >$@.t"
    commit
  end

  # Generate a local Ruby dependency.
  def local_ruby_dep name, *other_deps
    other_deps_string = other_deps.inject("") do | a, e |
      a + " " + e
    end
    new_entry "#{name}: #{name}.rb#{other_deps_string}"
    tab "ruby $(RUBYOPT) #{name}.rb >$@.t"
    commit
  end

end

specified_tgts = [
  "style.css",
  "index.html",
  "index_of_old_items.html",
  "index_of_group1.html"
]

images = relevant_filenames_in_dir_named "images"
tgt_images = images.map {|e| "img/#{e}"}
articles_dirs_names = ["our_articles", "others_articles"]
other_public_dirs = ["img"]
tgt_dirs = ["../public"] +
  ((other_public_dirs + articles_dirs_names).
    map {|e| "../public/#{e}"})
articles_rubyless_names = []
articles_dirs_names.each do |n|
  articles_rubyless_names += relevant_filenames_in_dir_named(n).map do |e|
    "#{n}/#{e}".sub(/\.rb\Z/, "")
  end
end
tgt_articles = articles_rubyless_names

tgts = specified_tgts + tgt_images + tgt_articles +
  [ "mission.htm", "activities.html", "log.html"]

tgts_string = tgts.inject("") do | a, e |
  a + " ../public/" + e
end
tgt_dirs_string = tgt_dirs.inject("") do | a, e |
  a + " " + e
end

puts "# Generated by #{__FILE__}."
puts
puts "RUBYOPT = -I."



# The next entry is normally the first in the Makefile, so
# that making these targets is the default thing to do when
# you type "make".

new_entry "tgts:#{tgt_dirs_string} #{tgts_string}"
tab "ruby $(RUBYOPT) tell_photo_width.rb"


new_entry "list: . left right our_articles others_articles older_headers"
tab "ls *.rb >$@.t"
%w(left right our_articles others_articles older_headers).each do |e|
  tab "ls #{e}/*.rb >>$@.t"
end
commit

new_entry "try: tgts"
tab "firefox ../public/index.html >/dev/null 2>&1&"

new_entry "clean:"
tab "rm -f *~ ../public/*.t */*~"

new_entry "pristeen: clean"
tab "rm -rf ../public"

tgt_dirs.each do |e|
  new_entry "#{e}:"
  tab "test -d $@ || mkdir $@"
end

simple_ruby_dep "style.css", "common.rb", "env.rb"
simple_ruby_dep "index.html", "common.rb", "left", "right",
  "left/*", "right/*", "env.rb"
simple_ruby_dep "index_of_old_items.html", "common.rb", "older_headers",
  "older_headers/*", "env.rb", "html/log.html"
simple_ruby_dep "index_of_group1.html", "common.rb", "group1_links"

new_entry "group1_list: group1"
tab "ls group1 >$@.t"
commit

new_entry "group1_links: group1_list"
tab "test -d ../public/group1 || mkdir ../public/group1"
tab "rm -f ../public/group1/*"
tab "while read fn; do \\"
tab "  ln group1/$$fn ../public/group1/$$fn; \\"
tab "done <$?"

articles_rubyless_names.each do |e|
  simple_ruby_dep e, "common.rb", "env.rb"
end

local_ruby_dep "Makefile", "common.rb", "images",
  "*articles*", "env.rb"

images.each do |i|
  new_entry "../public/img/#{i}: images/#{i}"
  tab "rm -f $@"
  tab "ln $? $@"
end

[ "mission.htm", "activities.html", "log.html"
].each do | i |
  new_entry "../public/#{i}: html/#{i}"
  tab "rm -f $@"
  tab "ln $? $@"
end

[ "2011-11-16_hola_solidarity_appeal.html",
  "2011-11-15_fidel_genocidal-cynicism-part-two-and-end.html",
  "2011-11-17_phil_ltr.html",
  "2011-11-17_si_nicaragua.html",
  "2011-11-21_dont_attack_iran.html",
  "2012-04-23_ohio_labor.html.rb"
].each do | i |
  new_entry "../public/others_articles/#{i}: html/#{i}"
  # Do not link or copy; another rule (and a small extra file for each of these
  # files) makes this with Ruby.  The source has to
  # have the page style with the sidebar wrapped around it before publication.
end
[ "2011-11-17_solidarity_petition.html",
  "2011-11-22_09_iran_and_threat_of_us_imperialism.html",
  "2011-12-04_support_of_embassy_protest.html", "simin.html",
  "2006-mothers-day.html", "2006-03-03_india.html", "2005_war_women.html",
  "women_in_movements.html"
].each do | i |
  new_entry "../public/our_articles/#{i}: html/#{i}"
  # Do not link or copy; another rule (and a small extra file for each of these
  # files) makes this with Ruby.  The source has to
  # have the page style with the sidebar wrapped around it before publication.
end
